services:
    zookeeper:
        image: wurstmeister/zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        healthcheck:
            test: nc -z localhost 2181 || exit -1
            interval: 10s
            retries: 5
            timeout: 10s
    kafka:
        image: wurstmeister/kafka:latest
        ports:
            - "9092:9092"
        depends_on:
            zookeeper:
                condition: service_healthy
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_EXTERNAL://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_EXTERNAL://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        healthcheck:
            test: kafka-topics.sh --bootstrap-server localhost:9092 --list || exit -1
            interval: 10s
            retries: 5
            timeout: 10s
    timescaledb:
        image: timescale/timescaledb:latest-pg16
        volumes:
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: vehicle_db
            LANG: en_US.utf8
            LC_ALL: en_US.utf8
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d vehicle_db"]
            interval: 10s
            retries: 5
            timeout: 10s
    producer:
        build: .
        depends_on:
            kafka:
                condition: service_healthy
        working_dir: /app
        command: python producer.py
        environment:
            KAFKA_BROKER: kafka:29092
            KAFKA_TOPIC: vehicle_data
            
        deploy:
            replicas: 4
    consumer:
        build: .
        restart: always
        depends_on:
            kafka:
                condition: service_healthy
            timescaledb: 
                condition: service_healthy
        working_dir: /app
        command: python consumer.py
        environment:
            KAFKA_BROKER: kafka:29092
            KAFKA_TOPIC: vehicle_data
            TIMESCALEDB_HOST: timescaleDB
            TIMESCALEDB_PORT: 5432
            TIMESCALEDB_USER: postgres
            TIMESCALEDB_PASSWORD: password
            TIMESCALEDB_DB: vehicle_db